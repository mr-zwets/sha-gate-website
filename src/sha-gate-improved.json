{
  "contractName": "Sha_gate",
  "constructorInputs": [
    {
      "name": "pkhOperator0",
      "type": "bytes20"
    },
    {
      "name": "pkhOperator1",
      "type": "bytes20"
    },
    {
      "name": "pkhOperator2",
      "type": "bytes20"
    },
    {
      "name": "pkhOperator3",
      "type": "bytes20"
    },
    {
      "name": "pkhOperator4",
      "type": "bytes20"
    },
    {
      "name": "startPeriodBytes",
      "type": "bytes8"
    },
    {
      "name": "payout",
      "type": "bytes31"
    },
    {
      "name": "voteCountBytes",
      "type": "bytes2"
    }
  ],
  "abi": [
    {
      "name": "lock",
      "inputs": []
    },
    {
      "name": "initWithdrawal",
      "inputs": [
        {
          "name": "s",
          "type": "sig"
        },
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "newPayout",
          "type": "bytes31"
        }
      ]
    },
    {
      "name": "vote",
      "inputs": [
        {
          "name": "coinbaseTx",
          "type": "bytes"
        },
        {
          "name": "agree",
          "type": "bool"
        }
      ]
    },
    {
      "name": "finishWithdrawal",
      "inputs": []
    }
  ],
  "bytecode": "OP_8 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_UNKNOWN192 OP_0 OP_NUMEQUALVERIFY OP_0 OP_UNKNOWN204 OP_0 OP_UNKNOWN198 OP_SUB 1027 OP_GREATERTHAN OP_VERIFY a914 OP_UNKNOWN193 OP_HASH160 OP_CAT 87 OP_CAT OP_0 OP_UNKNOWN205 OP_EQUALVERIFY OP_2DROP OP_2DROP OP_2DROP OP_2DROP OP_DROP OP_1 OP_ELSE OP_8 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_9 OP_ROLL OP_10 OP_PICK OP_CHECKSIGVERIFY OP_9 OP_ROLL OP_HASH160 OP_DUP OP_ROT OP_EQUAL OP_OVER OP_3 OP_ROLL OP_EQUAL OP_BOOLOR OP_OVER OP_3 OP_ROLL OP_EQUAL OP_BOOLOR OP_OVER OP_3 OP_ROLL OP_EQUAL OP_BOOLOR OP_SWAP OP_ROT OP_EQUAL OP_BOOLOR OP_VERIFY OP_BIN2NUM 2808 OP_ADD OP_CHECKLOCKTIMEVERIFY OP_DROP OP_3 OP_PICK OP_SIZE OP_NIP 1f OP_NUMEQUALVERIFY 020000010f OP_4 OP_ROLL OP_CAT OP_8 OP_CAT OP_UNKNOWN197 OP_8 OP_NUM2BIN OP_CAT OP_UNKNOWN193 2c OP_SPLIT OP_NIP OP_CAT OP_UNKNOWN192 OP_0 OP_NUMEQUALVERIFY OP_0 OP_UNKNOWN198 e803 OP_SUB OP_0 OP_UNKNOWN204 OP_NUMEQUALVERIFY a914 OP_SWAP OP_HASH160 OP_CAT 87 OP_CAT OP_0 OP_UNKNOWN205 OP_EQUAL OP_NIP OP_NIP OP_NIP OP_ELSE OP_8 OP_PICK OP_2 OP_NUMEQUAL OP_IF OP_1 OP_UNKNOWN200 OP_10 OP_PICK OP_HASH256 OP_EQUALVERIFY OP_0 20 OP_NUM2BIN OP_10 OP_PICK 29 OP_SPLIT OP_DROP 0100000001 OP_ROT OP_CAT ffffffff OP_CAT OP_EQUALVERIFY OP_1 OP_UNKNOWN201 OP_0 OP_NUMEQUALVERIFY OP_9 OP_ROLL 2b OP_SPLIT OP_NIP OP_3 OP_SPLIT OP_DROP OP_BIN2NUM OP_6 OP_ROLL OP_BIN2NUM OP_GREATERTHAN OP_VERIFY OP_6 OP_ROLL OP_BIN2NUM OP_8 OP_ROLL OP_IF OP_DUP OP_1ADD OP_NIP OP_ELSE OP_DUP OP_2 OP_SUB OP_NIP OP_ENDIF OP_2 OP_NUM2BIN OP_2 OP_SWAP OP_CAT OP_UNKNOWN193 OP_3 OP_SPLIT OP_NIP OP_CAT OP_UNKNOWN192 OP_0 OP_NUMEQUALVERIFY OP_0 OP_UNKNOWN198 e803 OP_SUB OP_0 OP_UNKNOWN204 OP_NUMEQUALVERIFY a914 OP_SWAP OP_HASH160 OP_CAT 87 OP_CAT OP_0 OP_UNKNOWN205 OP_EQUALVERIFY OP_2DROP OP_2DROP OP_2DROP OP_DROP OP_1 OP_ELSE OP_8 OP_ROLL OP_3 OP_NUMEQUALVERIFY OP_6 OP_ROLL 17 OP_SPLIT OP_BIN2NUM OP_1 OP_UNKNOWN204 OP_OVER OP_NUMEQUALVERIFY OP_1 OP_UNKNOWN205 OP_ROT OP_EQUALVERIFY OP_6 OP_ROLL OP_BIN2NUM e007 OP_ADD OP_CHECKLOCKTIMEVERIFY OP_DROP OP_6 OP_ROLL OP_BIN2NUM OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_0 1f OP_NUM2BIN 0200001f OP_SWAP OP_CAT OP_UNKNOWN193 23 OP_SPLIT OP_NIP OP_CAT OP_UNKNOWN192 OP_0 OP_NUMEQUALVERIFY OP_0 OP_UNKNOWN198 OP_ROT OP_SUB e803 OP_SUB OP_0 OP_UNKNOWN204 OP_NUMEQUALVERIFY a914 OP_SWAP OP_HASH160 OP_CAT 87 OP_CAT OP_0 OP_UNKNOWN205 OP_EQUALVERIFY OP_2DROP OP_2DROP OP_DROP OP_1 OP_ENDIF OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.7.0;\n\n// Sha-gate covenant enables trust-minimized briding to Smart BCH\n\n// One Sha-gate covenant can bridge any number of deposits to the SBCH sidechain.\n// The return from the sidechain to the mainchain works with miner voting on the P2SH \n// of a payout covenant proposed by one of the operators. The payout covenant batches\n// withdrawals to any number of addresses once approved after a fixed length voting period. \n// The Sha-gate would manage a large amount of BCH so withdrawals need to be slow\n// with long voting periods so miner collusion with an operator is sufficiently difficult.\n// The withdrawal function of the contract can be used to perform L1 burning of BCH\n// and to upgrade the contract code or remove malicious/compromised operators.\n\n// Chosen security parameters:\n// - Operator keys: 5 (could fit 6)\n// - Voting period: 2016 blocks (~2 weeks worth of blocks), after which finishWithdrawal is enabled\n// - Agree-voting threshold for valid withdrawal: 66%\n// - Withdrawal period: 72 blocks (.5 day worth of blocks), after which initWithdrawal is enabled\n//   If no votes are placed at all the withdrawal is also valid.\n// - Minimum bridge amount: 10000 sats\n// Note: more operators is not better per se, as this also means more parties that could\n// become compromised or bribed and act maliciously\n\n// See notes on 20byte P2SHash collision vulnerability\n\n// Opcode count: 194 (max 201)\n// Bytesize: 478 (max 520)\n\ncontract Sha_gate(\n   // constant constructor parameters\n   bytes20 pkhOperator0, \n   bytes20 pkhOperator1, \n   bytes20 pkhOperator2,\n   bytes20 pkhOperator3,\n   bytes20 pkhOperator4,\n\n   // constructor parameters of simulated state\n   // last because constructor parameters are added in reverse order\n   bytes8 startPeriodBytes, // updated at initWithdrawal\n   bytes31 payout, // bytes23 P2SH + bytes8 amount \n   bytes2 voteCountBytes // up to ~32000 or 227 days of votes\n) {\n   // lock extra funds in the covenant to bridge them\n   function lock(\n   ) {\n      // require the SHA-gate covenant to be at index0\n      // allows for more than 2 inputs\n      require(this.activeInputIndex == 0);\n      // briding can have change output so SBCH amount is difference in contract value before and after\n      int amountBridged = tx.outputs[0].value - tx.inputs[0].value;\n      // enforces minimum amount for the bridge\n      // implicity requires tx.outputs[0].value > tx.inputs[0].value\n      require(amountBridged > 10000);\n      // bytecode of SHA-gate covenant should not change\n      bytes23 out = new LockingBytecodeP2SH(hash160(this.activeBytecode));\n      require(tx.outputs[0].lockingBytecode == out);\n   }\n\n   // initialize a withdrawal proposal\n   function initWithdrawal(\n      sig s, \n      pubkey pk, \n      bytes31 newPayout // bytes23 P2SH + bytes8 amount\n   ) {\n      require(checkSig(s, pk));\n      bytes20 pkh = hash160(pk);\n      require(pkh == pkhOperator0 || pkh == pkhOperator1 || pkh == pkhOperator2 || pkh == pkhOperator3 || pkh == pkhOperator4);\n      // when initWithdrawal is called late, the voting period might be shorter \n      // nLocktime is at minimum 2088 blocks in the future, not the current blockheight per se\n      require(tx.time >= int(startPeriodBytes) + 2088); // voting period + withdrawal period\n\n      // check length newPayout before adding to simulated state\n      require(newPayout.length == 31);\n      // update payout P2SH, startPeriodBytes and clear vote count\n      bytes newContract = 0x02000001f + newPayout + 0x08 + bytes8(tx.locktime) + this.activeBytecode.split(44)[1];// 3+32+9\n      // require the SHA-gate covenant to be at index0\n      // so that tx.inputs[0].value is value of SHA-gate covenant\n      require(this.activeInputIndex == 0);\n      int amount = tx.inputs[0].value - 1000; // 1000 is hardcoded fee\n      require(tx.outputs[0].value == amount);\n      bytes23 out = new LockingBytecodeP2SH(hash160(newContract));\n      require(tx.outputs[0].lockingBytecode == out);\n   }\n\n   // miners vote for whether payout of amount to P2SH can be sent or not\n   function vote(\n      bytes coinbaseTx,\n      bool agree\n   ) {\n      // get the coinbaseTxID to check again hash of coinbaseTx\n      bytes coinbaseTxID = tx.inputs[1].outpointTransactionHash;\n      require(hash256(coinbaseTx) == coinbaseTxID);\n      // check parent transaction is coinbase tx by checking\n      // version of 1, inputcount of 1, txID of all zeroes, and the vout all f's\n      bytes32 allZeroTxid= bytes32(0); // saves a ton on bytesize\n      require(coinbaseTx.split(41)[0] == 0x0100000001 + allZeroTxid + 0xffffffff); // 5 + 32 +4\n      // use coinbase output with vout 0 as input on index 1\n      // this disables the ability for outputs from the same coinbase to vote multiple times\n      // each SHA-gate covenant should use a different hardcoded number for the coinbase vout.\n      require(tx.inputs[1].outpointIndex == 0);\n      \n      // parse coinbaseTx for 3 bytes blockheight in coinbase data field after 0x03, see BIP 0034\n      bytes coinbaseBlockHeight = coinbaseTx.split(43)[1].split(3)[0]; // 4+1+32+4+1+1 = 43\n      // height of the coinbase input must be greater than startPeriod\n      require(int(coinbaseBlockHeight) > int(startPeriodBytes));\n\n      int voteCount = int(voteCountBytes);\n      // implements 66% agree-voting threshold\n      if(agree) {\n         voteCount = voteCount + 1;\n      } else {\n         voteCount = voteCount - 2;\n      }\n      bytes2 newVoteCountBytes = bytes2(voteCount);\n\n      // update vote count\n      bytes newContract = 0x02 + newVoteCountBytes + this.activeBytecode.split(3)[1];// 3\n      require(this.activeInputIndex == 0);\n      // require the SHA-gate covenant to be at index0\n      // so that tx.inputs[0].value is value of SHA-gate covenant\n      int amount = tx.inputs[0].value - 1000; // 1000 is hardcoded fee\n      require(tx.outputs[0].value == amount);\n      bytes23 out = new LockingBytecodeP2SH(hash160(newContract));\n      require(tx.outputs[0].lockingBytecode == out);\n   }\n\n   // finish the withdrawal process\n   function finishWithdrawal(\n   ) {\n      bytes23 payoutP2SH, bytes8 amountPayoutBytes = payout.split(23);\n      int amountPayout = int(amountPayoutBytes); // saves one opcode\n      require(tx.outputs[1].value == amountPayout);\n      require(tx.outputs[1].lockingBytecode == payoutP2SH);\n      require(tx.time >= int(startPeriodBytes) + 2016); // voting period\n      require(int(voteCountBytes) >= 0);\n\n      // clear votes and payout\n      bytes31 allZeroPayout = bytes31(0); // saves a ton on bytesize\n      bytes clearedContract = 0x0200001f+ allZeroPayout + this.activeBytecode.split(35)[1];// 1+2+1+31\n      // require the SHA-gate covenant to be at index0\n      // so that tx.inputs[0].value is value of SHA-gate covenant\n      require(this.activeInputIndex == 0);\n      int amountLeft = tx.inputs[0].value - amountPayout - 1000; // 1000 is hardcoded fee\n      require(tx.outputs[0].value == amountLeft);\n      bytes23 out = new LockingBytecodeP2SH(hash160(clearedContract));\n      require(tx.outputs[0].lockingBytecode == out);\n   }\n}",
  "compiler": {
    "name": "cashc",
    "version": "0.7.0"
  },
  "updatedAt": "2022-06-24T11:20:05.321Z"
}